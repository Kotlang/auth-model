syntax = "proto3";

import "common.proto";

option java_multiple_files = true;
option java_package = "com.kotlang.auth.login";
option java_outer_classname = "ProfileInternal";

option go_package = "github.com/Kotlang/authGo/generated";

package login;

// Profile service handles RPCs related to user profiles.
// An interceptor ensures users are not blocked or marked for deletion, if so a codes.PermissionDenied error is returned.
// The expected behaviour from the client is to logout the user for the codes.PermissionDenied error.
service Profile {

    // Create or update a user profile. If the profile already exists, it will be updated. 
    // All fields are optional except the name field. Fields that are not set will be retained from the existing profile.
    rpc createOrUpdateProfile(CreateProfileRequest) returns (UserProfileProto) {}

    // Get the profile of the user by the user's id. Blocked or users marked will lead to codes.PermissionDenied error.
    rpc getProfileById(IdRequest) returns (UserProfileProto) {}

    // Get the profile of the user by the user's id. Any user that is not blocked or marked for deletion can be fetched.
    rpc bulkGetProfileByIds(BulkGetProfileRequest) returns (ProfileListResponse) {}

    // returns a pre-signed Url to upload profile image.
    rpc getProfileImageUploadUrl(ProfileImageUploadRequest) returns (ProfileImageUploadURL) {}

    // directly takes input of profile image and uploads the image.
    rpc UploadProfileImage(stream UploadImageRequest) returns (UploadImageResponse) {}

    // Admin only APIs
    rpc getProfileByPhoneOrEmail(GetProfileByPhoneOrEmailRequest) returns (UserProfileProto) {}
    rpc FetchProfiles(FetchProfilesRequest) returns (ProfileListResponse) {}

    // not implemented
    rpc getProfilesByAttribute(AttributeRequest) returns (AttributeResponse) {}
}

//all are optional. If any of the field is not set, old value will be retained.
//For e.g. to update just photoUrl, send only photoUrl in below proto
message CreateProfileRequest {
    string name = 1;
    Gender gender = 2;
    string photoUrl = 3;
    string bio = 4;
    map<string, AddressProto> addresses = 5;
    string preferredLanguage = 6;
    FarmingType farmingType = 7;
    repeated string crops = 8;
    repeated string attributes = 9;
    CertificationDetails certificationDetails = 10;
    int32 yearsSinceOrganicFarming = 11;
    LandSizeInAcres landSizeInAcres = 12;
    Location location = 13;
}

message Userfilters {
    string name = 1;
    Gender gender = 2;
    FarmingType farmingType = 3;
    int32 yearsSinceOrganicFarming = 4;
    LandSizeInAcres landSizeInAcres = 5;
}

message FetchProfilesRequest {
    Userfilters Filters = 1;
    int32 pageSize = 2;
    int32 pageNumber = 3;
}

message ProfileImageUploadRequest {
    // jpg or png or mp4
    string mediaExtension = 1;
}

message ProfileImageUploadURL {
    string uploadUrl = 1;
    string mediaUrl = 2;
    string instructions = 3;
}

message AttributeRequest {
    string attribute = 1;
}

message AttributeResponse {
    repeated UserProfileProto profiles = 1;
}

message UploadImageRequest {
    bytes chunkData = 1;
}

message UploadImageResponse {
    string uploadPath = 1;
}

message BulkGetProfileRequest {
    repeated string userIds = 1;
}

message GetProfileByPhoneOrEmailRequest {
    string phone = 1;
    string email = 2;
}